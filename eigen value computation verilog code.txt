`timescale 1 ns / 100ps

module cordic_vector_mode (clk,x,y,z1);
input signed [31:0]x,y;
input clk;
output reg signed [31:0]z1;
reg signed [31:0]x_in[15:0];
reg signed [31:0]y_in[15:0];
reg signed [31:0]z_in[15:0];
reg [31:0]tan_inv[15:0];

initial begin
 tan_inv[0]<=32'd46080;
 tan_inv[1]<=32'd27197;
 tan_inv[2]<=32'd14373;
 tan_inv[3]<=32'd7297;
 tan_inv[4]<=32'd3662;
 tan_inv[5]<=32'd1832;
 tan_inv[6]<=32'd916;
 tan_inv[7]<=32'd458;
 tan_inv[8]<=32'd229;
 tan_inv[9]<=32'd114;
 tan_inv[10]<=32'd57;
// tan_inv[11]=28;
// tan_inv[12]=14;
// tan_inv[13]=7;
// tan_inv[14]=3;
// tan_inv[15]=1;
 end
 
always@(posedge clk)
begin
 x_in[0]<=x;//<<<10;
 y_in[0]<=y;//<<<10;
 z_in[0]<=32'd0;
if((y_in[0]>=0 && x_in[0]>=0))
begin
x_in[1]<=x_in[0]+y_in[0]>>>0;
y_in[1]<=y_in[0]-x_in[0]>>>0;
z_in[1]<=tan_inv[0];
end


else if((y_in[0]<=0 && x_in[0]>0) )
begin
x_in[1]<=x_in[0]-y_in[0]>>>0;
y_in[1]<=y_in[0]+x_in[0]>>>0;
z_in[1]<=-tan_inv[0];
end


else if (y_in[0]>=0 && x_in[0]<0)
begin
x_in[1]<=x_in[0]+y_in[0]>>>0;
y_in[1]<=y_in[0]-x_in[0]>>>0;
z_in[1]<=32'd92160+tan_inv[0];
end

else
begin
x_in[1]<=x_in[0]+y_in[0]>>>0;
y_in[1]<=y_in[0]-x_in[0]>>>0;
z_in[1]<=32'd184320+tan_inv[0];
end

if(y_in[1]>=0)
begin
x_in[2]<=x_in[1]+(y_in[1]>>>1);
y_in[2]<=y_in[1]-(x_in[1]>>>1);
z_in[2]<=z_in[1]+tan_inv[1];
end
else
begin
x_in[2]<=x_in[1]-(y_in[1]>>>1);
y_in[2]<=y_in[1]+(x_in[1]>>>1);
z_in[2]<=z_in[1]-tan_inv[1];
end

if(y_in[2]>=0)
begin
x_in[3]<=x_in[2]+(y_in[2]>>>2);
y_in[3]<=y_in[2]-(x_in[2]>>>2);
z_in[3]<=z_in[2]+tan_inv[2];
end
else
begin
x_in[3]<=x_in[2]-(y_in[2]>>>2);
y_in[3]<=y_in[2]+(x_in[2]>>>2);
z_in[3]<=z_in[2]-(tan_inv[2]);
end

if(y_in[3]>=0)
begin
x_in[4]<=x_in[3]+(y_in[3]>>>3);
y_in[4]<=y_in[3]-(x_in[3]>>>3);
z_in[4]<=z_in[3]+tan_inv[3];
end
else
begin
x_in[4]<=x_in[3]-(y_in[3]>>>3);
y_in[4]<=y_in[3]+(x_in[3]>>>3);
z_in[4]<=z_in[3]-tan_inv[3];
end

if(y_in[4]>=0)
begin
x_in[5]<=x_in[4]+(y_in[4]>>>4);
y_in[5]<=y_in[4]-(x_in[4]>>>4);
z_in[5]<=z_in[4]+tan_inv[4];
end
else
begin
x_in[5]<=x_in[4]-(y_in[4]>>>4);
y_in[5]<=y_in[4]+(x_in[4]>>>4);
z_in[5]<=z_in[4]-tan_inv[4];
end

if(y_in[5]>=0)
begin
x_in[6]<=x_in[5]+(y_in[5]>>>5);
y_in[6]<=y_in[5]-(x_in[5]>>>5);
z_in[6]<=z_in[5]+tan_inv[5];
end
else
begin
x_in[6]<=x_in[5]-(y_in[5]>>>5);
y_in[6]<=y_in[5]+(x_in[5]>>>5);
z_in[6]<=z_in[5]-tan_inv[5];
end

if(y_in[6]>=0)
begin
x_in[7]<=x_in[6]+(y_in[6]>>>6);
y_in[7]<=y_in[6]-(x_in[6]>>>6);
z_in[7]<=z_in[6]+tan_inv[6];
end
else
begin
x_in[7]<=x_in[6]-(y_in[6]>>>6);
y_in[7]<=y_in[6]+(x_in[6]>>>6);
z_in[7]<=z_in[6]-tan_inv[6];
end

if(y_in[7]>=0)
begin
x_in[8]<=x_in[7]+(y_in[7]>>>7);
y_in[8]<=y_in[7]-(x_in[7]>>>7);
z_in[8]<=z_in[7]+tan_inv[7];
end
else
begin
x_in[8]<=x_in[7]-(y_in[7]>>>7);
y_in[8]<=y_in[7]+(x_in[7]>>>7);
z_in[8]<=z_in[7]-tan_inv[7];
end

if(y_in[8]>=0)
begin
x_in[9]<=x_in[8]+(y_in[8]>>>8);
y_in[9]<=y_in[8]-(x_in[8]>>>8);
z_in[9]<=z_in[8]+tan_inv[8];
end
else
begin
x_in[9]<=x_in[8]-(y_in[8]>>>8);
y_in[9]<=y_in[8]+(x_in[8]>>>8);
z_in[9]<=z_in[8]-(tan_inv[8]);
end

//if(y_in[10]>=0)
//begin
//x_in[11]<=x_in[10]+(y_in[10]>>>10);
//y_in[11]<=y_in[10]-(x_in[10]>>>10);
//z_in[11]<=z_in[10]+tan_inv[10];
//end
//else
//begin
//x_in[11]<=x_in[10]-(y_in[10]>>>10);
//y_in[11]<=y_in[10]+(x_in[10]>>>10);
//z_in[11]<=z_in[10]-(tan_inv[10]);
//end

//if(y_in[11]>0)
//begin
//x_in[12]<=x_in[11]+(y_in[11]>>>11);
//y_in[12]<=y_in[11]-(x_in[11]>>>11);
//z_in[12]<=z_in[11]+tan_inv[11];
//end
//else
//begin
//x_in[12]<=x_in[11]-(y_in[11]>>>11);
//y_in[12]<=y_in[11]+(x_in[11]>>>11);
//z_in[12]<=z_in[11]-(tan_inv[11]);
//end

//if(y_in[12]>0)
//begin
//x_in[13]<=x_in[12]+(y_in[12]>>>12);
//y_in[13]<=y_in[12]-(x_in[12]>>>12);
//z_in[13]<=z_in[12]+tan_inv[12];
//end
//else
//begin
//x_in[13]<=x_in[12]-(y_in[12]>>>12);
//y_in[13]<=y_in[12]+(x_in[12]>>>12);
//z_in[13]<=z_in[12]-(tan_inv[12]);
//end


//if(y_in[13]>0)
//begin
//x_in[14]<=x_in[13]+(y_in[13]>>>13);
//y_in[14]<=y_in[13]-(x_in[13]>>>13);
//z_in[14]<=z_in[13]+tan_inv[13];
//end
//else
//begin
//x_in[14]<=x_in[13]-(y_in[13]>>>13);
//y_in[14]<=y_in[13]+(x_in[13]>>>13);
//z_in[14]<=z_in[13]-(tan_inv[13]);
//end



//if(y_in[14]>0)
//begin
//x_in[15]<=x_in[14]+(y_in[14]>>>14);
//y_in[15]<=y_in[14]-(x_in[14]>>>14);
//z_in[15]<=z_in[14]+tan_inv[14];
//end
//else
//begin
//x_in[15]<=x_in[14]-(y_in[12]>>>14);
//y_in[15]<=y_in[14]+(x_in[12]>>>14);
//z_in[15]<=z_in[14]-(tan_inv[14]);
//end
z1<=(z_in[9]>>>10);
end
//assign z1=z_in[1];
//assign z2=z_in[2];
//assign z3=z_in[3];
//assign z4=z_in[4];
//assign z5=z_in[5];
//assign z6=z_in[6];

//assign z8=z_in[13];
//assign z9=z_in[15];

endmodule



module rotation_cordic(clk,phi,x,y);
input signed [31:0] phi;
input clk;
//output [1:0]d;
output reg signed [31:0]x,y;
wire signed [31:0]z;
reg [31:0]k=20'h00000;
//reg signed [32:0]x,y,z;
reg  signed [31:0]x_n[16:0];
reg  signed [31:0]y_n[16:0];
reg signed [31:0]z_n[16:0];
reg signed [1:0]d;

reg signed [31:0]w[15:0];

reg [32:0]arc_tan[15:0];
integer i;

initial begin
//x<=32'b0;
//y<=32'b0;
//z<=32'b0;
x_n[0]<=32'd2440;
y_n[0]<=32'd5;
z_n[0]<=32'b0;
d<=2'b01;
//arc_tan values multiplied by 2^10=1024 i.e 45*1024=46080
arc_tan[0]<=184320;
arc_tan[1]<=108810;
arc_tan[2]<=57492;
arc_tan[3]<=29184;
arc_tan[4]<=14648;
arc_tan[5]<=1832;
arc_tan[6]<=7323;
arc_tan[7]<=1860;
arc_tan[8]<=916;
arc_tan[9]<=458;
arc_tan[10]<=228;
arc_tan[11]<=112;
arc_tan[12]<=56;
arc_tan[13]<=28;
arc_tan[14]<=12;
arc_tan[15]<=4;
end


always@(posedge clk)
begin
k<=(phi<<<12);
x_n[1]<=x_n[0]-((y_n[0]>>>0));
y_n[1]<=y_n[0]+((x_n[0]>>>0));
z_n[1]<=z_n[0]+((arc_tan[0]));
end

always@(posedge clk)
begin
if(z_n[1]>k)
begin
x_n[2]<=x_n[1]+((y_n[1]>>>1));
y_n[2]<=y_n[1]-((x_n[1]>>>1));
z_n[2]<=z_n[1]-((arc_tan[1]));
end
else
begin
x_n[2]<=x_n[1]-((y_n[1]>>>1));
y_n[2]<=y_n[1]+((x_n[1]>>>1));
z_n[2]<=z_n[1]+((arc_tan[1]));
end
end

always@(posedge clk)
begin
if(z_n[2]>k)
begin
x_n[3]<=x_n[2]+((y_n[2]>>>2));
y_n[3]<=y_n[2]-((x_n[2]>>>2));
z_n[3]<=z_n[2]-((arc_tan[2]));
end
else
begin
x_n[3]<=x_n[2]-((y_n[2]>>>2));
y_n[3]<=y_n[2]+((x_n[2]>>>2));
z_n[3]<=z_n[2]+((arc_tan[2]));
end
end

always@(posedge clk)
begin
if(z_n[3]>k)
begin
x_n[4]<=x_n[3]+((y_n[3]>>>3));
y_n[4]<=y_n[3]-((x_n[3]>>>3));
z_n[4]<=z_n[3]-((arc_tan[3]));
end
else
begin
x_n[4]<=x_n[3]-((y_n[2]>>>3));
y_n[4]<=y_n[3]+((x_n[2]>>>3));
z_n[4]<=z_n[3]+((arc_tan[3]));
end
end
always@(posedge clk)
begin
if(z_n[4]>k)
begin
x_n[5]<=x_n[4]+((y_n[4]>>>4));
y_n[5]<=y_n[4]-((x_n[4]>>>4));
z_n[5]<=z_n[4]-((arc_tan[4]));
end
else
begin
x_n[5]<=x_n[4]-((y_n[4]>>>4));
y_n[5]<=y_n[4]+((x_n[4]>>>4));
z_n[5]<=z_n[4]+((arc_tan[4]));
end
end

always@(posedge clk)
begin
if(z_n[5]>k)
begin
x_n[6]<=x_n[5]+((y_n[5]>>>5));
y_n[6]<=y_n[5]-((x_n[5]>>>5));
z_n[6]<=z_n[5]-((arc_tan[5]));
end
else
begin
x_n[6]<=x_n[5]-((y_n[5]>>>5));
y_n[6]<=y_n[5]+((x_n[5]>>>5));
z_n[6]<=z_n[5]+((arc_tan[5]));
end
end

always@(posedge clk)
begin
if(z_n[6]>k)
begin
x_n[7]<=x_n[6]+((y_n[6]>>>6));
y_n[7]<=y_n[6]-((x_n[6]>>>6));
z_n[7]<=z_n[6]-((arc_tan[6]));
end
else
begin
x_n[7]<=x_n[6]-((y_n[6]>>>6));
y_n[7]<=y_n[6]+((x_n[6]>>>6));
z_n[7]<=z_n[6]+((arc_tan[6]));
end
end

always@(posedge clk)
begin
if(z_n[7]>k)
begin
x_n[8]<=x_n[7]+((y_n[7]>>>7));
y_n[8]<=y_n[7]-((x_n[7]>>>7));
z_n[8]<=z_n[7]-((arc_tan[7]));
end
else
begin
x_n[8]<=x_n[7]-((y_n[7]>>>7));
y_n[8]<=y_n[7]+((x_n[7]>>>7));
z_n[8]<=z_n[7]+((arc_tan[7]));
end
end

always@(posedge clk)
begin
if(z_n[8]>k)
begin
x_n[9]<=x_n[8]+((y_n[8]>>>8));
y_n[9]<=y_n[8]-((x_n[8]>>>8));
z_n[9]<=z_n[8]-((arc_tan[8]));
end
else
begin
x_n[9]<=x_n[8]-((y_n[8]>>>8));
y_n[9]<=y_n[8]+((x_n[5]>>>8));
z_n[9]<=z_n[8]+((arc_tan[8]));
end
end

always@(posedge clk)
begin
if(z_n[9]>k)
begin
x_n[10]<=x_n[9]+((y_n[9]>>>9));
y_n[10]<=y_n[9]-((x_n[9]>>>9));
z_n[10]<=z_n[9]-((arc_tan[9]));
end
else
begin
x_n[10]<=x_n[9]-((y_n[9]>>>9));
y_n[10]<=y_n[9]+((x_n[9]>>>9));
z_n[10]<=z_n[9]+((arc_tan[9]));
end
end
always@(posedge clk)
begin
if(z_n[10]>k)
begin
x_n[11]<=x_n[10]+((y_n[10]>>>10));
y_n[11]<=y_n[10]-((x_n[10]>>>10));
z_n[11]<=z_n[10]-((arc_tan[10]));
end
else
begin
x_n[11]<=x_n[10]-((y_n[10]>>>10));
y_n[11]<=y_n[10]+((x_n[10]>>>10));
z_n[11]<=z_n[10]+((arc_tan[10]));
end
end

always@(posedge clk)
begin
if(z_n[10]>k)
begin
x_n[12]<=x_n[11]+((y_n[11]>>>11));
y_n[12]<=y_n[11]-((x_n[11]>>>11));
z_n[12]<=z_n[11]-((arc_tan[11]));
end
else
begin
x_n[12]<=x_n[11]-((y_n[11]>>>11));
y_n[12]<=y_n[11]+((x_n[11]>>>11));
z_n[12]<=z_n[11]+((arc_tan[11]));
end


 x<=(x_n[12]>>>2);
 y<=(y_n[12]>>>2);
end
endmodule


module prilimnary_project(clk,a,e1,e2,e3,e4,jk1,jk2,jk3,jk4,jk5,jk6,jk7,jk8,jk9,jk10,jk11,jk12);
input clk;
input signed [511:0]a;
output signed [31:0]e1,e2,e3,e4,jk1,jk2,jk3,jk4,jk5,jk6,jk7,jk8,jk9,jk10,jk11,jk12;

reg signed [31:0]a_k[3:0][3:0];
reg signed [31:0]b_k[3:0][3:0];
reg signed [31:0]o_k[3:0][3:0];
reg signed [31:0]A_k[3:0][3:0];
reg signed [31:0]r_k[3:0][3:0];
reg signed [31:0]r_k_t[3:0][3:0];
reg signed [31:0]store[15:0];
reg signed [31:0]maxh=32'h0;
reg signed [31:0]complement=32'hffffffff;
reg [2:0] i_pos,j_pos;
wire signed [31:0]c_k[3:0][3:0];
wire [31:0]w[15:0];
integer i,j,k;
genvar l1,i1,j1,k1,i4;

//for(l1=0;l1<2;l1=l1+1)
//begin
always@(posedge clk)
begin
{a_k[0][0],a_k[0][1],a_k[0][2],a_k[0][3],a_k[1][0],a_k[1][1],a_k[1][2],a_k[1][3],a_k[2][0],a_k[2][1],a_k[2][2],a_k[2][3],a_k[3][0],a_k[3][1],a_k[3][2],a_k[3][3]}<=a;


A_k[0][0]=(a_k[0][0]<<<10);
A_k[0][1]=(a_k[0][1]<<<10);
A_k[0][2]=(a_k[0][2]<<<10);
A_k[0][3]=(a_k[0][3]<<<10);
A_k[1][0]=(a_k[1][0]<<<10);
A_k[1][1]=(a_k[1][1]<<<10);
A_k[1][2]=(a_k[1][2]<<<10);
A_k[1][3]=(a_k[1][3]<<<10);
A_k[2][0]=(a_k[2][0]<<<10);
A_k[2][1]=(a_k[2][1]<<<10);
A_k[2][2]=(a_k[2][2]<<<10);
A_k[2][3]=(a_k[2][3]<<<10);
A_k[3][0]=(a_k[3][0]<<<10);
A_k[3][1]=(a_k[3][1]<<<10);
A_k[3][2]=(a_k[3][2]<<<10);
A_k[3][3]=(a_k[3][3]<<<10);
for(i=0;i<4;i=i+1)
begin
for(j=0;j<4;j=j+1)
begin
if(i!=j)
begin
if(maxh<=a_k[i][j])
begin
maxh<=a_k[i][j];
i_pos<=i;
j_pos<=j;
end
end
end
end
i<=i_pos;
j<=j_pos;
//R_k matrix formation
end


assign w[0]=(2*(a_k[i][j]<<<10));
assign w[1]=((a_k[i][i]<<<10)-(a_k[j][j]<<<10));


cordic_vector_mode a1 (clk,w[1],w[0],w[3]);
assign w[4]=w[3]/2;
rotation_cordic a2 (clk,w[4],w[5],w[6]);//W[6]=SIN,W[5]=COS

always@(posedge clk)
begin
for(i=0;i<4;i=i+1)
begin
for(j=0;j<4;j=j+1)
begin
if(i==j )
begin
r_k[i][j]<=32'h400;
r_k_t[i][j]<=32'h400;
end
else
begin
r_k[i][j]<=32'h0;
r_k_t[i][j]<=32'h0;
end
end
end
store[0]<=32'hffffffff-w[6];
store[1]<=store[0]+32'h1;
r_k[i_pos][i_pos]<=w[5];
r_k[j_pos][j_pos]<=w[5];
r_k_t[i_pos][i_pos]<=w[5];
r_k_t[j_pos][j_pos]<=w[5];

if(j_pos>i_pos)
begin
r_k[j_pos][i_pos]<=w[6];
r_k[i_pos][j_pos]<=store[1];
r_k_t[j_pos][i_pos]<=store[1];
r_k_t[i_pos][j_pos]<=w[6];
end
else
begin
r_k[i_pos][j_pos]<=w[6];
r_k[j_pos][i_pos]<=store[1];
r_k_t[i_pos][j_pos]<=store[1];
r_k_t[j_pos][i_pos]<=w[6];
end
end


always@(posedge clk)
begin

//{b_k[0][0],b_k[0][1],b_k[0][2],b_k[0][3],b_k[1][0],b_k[1][1],b_k[1][2],b_k[1][3],b_k[2][0],b_k[2][1],b_k[2][2],b_k[2][3],b_k[3][0],b_k[3][1],b_k[3][2],b_k[3][3]}<=512'h0;

for(i=0;i<4;i=i+1)
begin

for(j=0;j<4;j=j+1)
begin
b_k[i][j]=32'h0;
for(k=0;k<4;k=k+1)
begin

b_k[i][j]=b_k[i][j]+((r_k[i][k])*(a_k[k][j]));
end
end
end
end


always@(posedge clk)
begin

//{b_k[0][0],b_k[0][1],b_k[0][2],b_k[0][3],b_k[1][0],b_k[1][1],b_k[1][2],b_k[1][3],b_k[2][0],b_k[2][1],b_k[2][2],b_k[2][3],b_k[3][0],b_k[3][1],b_k[3][2],b_k[3][3]}<=512'h0;

for(i=0;i<4;i=i+1)
begin


for(j=0;j<4;j=j+1)
begin
o_k[i][j]=32'h0;
for(k=0;k<4;k=k+1)
begin
o_k[i][j]=o_k[i][j]+((b_k[i][k])*(r_k_t[k][j]));
end
end
end
end





////end
//always@(posedge clk)
//begin
//e1=b_k[2][0];
//e2=b_k[2][1];
//e3=b_k[2][2];
//e4=b_k[2][3];
//jk1=r_k[2][0];
// jk2=r_k[2][1];
// jk3=r_k[2][2];
//jk4=r_k[2][3];

// jk5=a_k[2][2];
// jk6=a_k[2][3];
//end
assign e1=(o_k[0][0]>>>10);
assign e2=(o_k[0][1]>>>10);
assign e3=(o_k[0][2]>>>10);
assign e4=(o_k[0][3]>>>10);

assign jk1=(o_k[1][0]>>>10);
assign jk2=(o_k[1][1]>>>10);
assign jk3=(o_k[1][2]>>>10);
assign jk4=(o_k[1][3]>>>10);



assign jk5=(o_k[2][0]>>>10);
assign jk6=(o_k[2][1]>>>10);
assign jk7=(o_k[2][2]>>>10);
assign jk8=(o_k[2][3]>>>10);

assign jk9=(o_k[3][0]>>>10);
assign jk10=(o_k[3][1]>>>10);
assign jk11=(o_k[3][2]>>>10);
assign jk12=(o_k[3][3]>>>10);
endmodule
